import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class NotificationsMenu extends JFrame {


    private VMS vms;
    private User user;
    private LocalDateTime time;
    private JPanel notificationsPanel;
    private JButton backButton;
    private JTable notificationsTable;

    public NotificationsMenu(VMS vms, User user, LocalDateTime time) {
        this();
        this.vms = vms;
        this.user = user;
        this.time = time;
        addNotificationsToTable();
    }

    public NotificationsMenu() {
        super.setTitle("Notifications");
        super.setContentPane(notificationsPanel);
        pack();
        setVisible(true);
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                NotificationsMenu.super.dispose();
                MainMenu mainMenu = new MainMenu(vms, user, time);
                mainMenu.setVisible(true);
                mainMenu.setDefaultCloseOperation(EXIT_ON_CLOSE);
            }
        });
    }

    private void addNotificationsToTable() {
        int userId = user.getUserId();
        List<Notification> notifications = null;
        for (User u : vms.getUsers()) {
            if (u.getUserId() == userId) {
                notifications = u.getNotifications();
                break;
            }
        }
        if (notifications == null)
            return;
        DefaultTableModel model = (DefaultTableModel) notificationsTable.getModel();
        model.setRowCount(0);
        model.setColumnCount(0);

        model.addColumn("Campaign ID");
        model.addColumn("Voucher codes");
        model.addColumn("Date sent");
        model.addColumn("Type");

        model.addRow(new Object[]{"Campaign ID", "Voucher codes",
                "Date sent", "Type"});

        for (Notification notif : notifications) {
            String campaignID = Integer.toString(notif.getCampaignId());
            List<String> codes = notif.getVoucher_codes();
            StringBuilder str = new StringBuilder();
            for (String code : codes) {
                str.append(code);
                if (codes.lastIndexOf(code) != codes.size() - 1)
                    str.append(", ");
            }
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern
                    ("yyyy-MM-dd HH:mm");
            String dateSent = notif.getDateSent().format(formatter);
            String type = notif.getType().toString();

            model.addRow(new Object[]{campaignID, str, dateSent, type});
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        notificationsPanel = new JPanel();
        notificationsPanel.setLayout(new BorderLayout(0, 0));
        notificationsPanel.setBackground(new Color(-14402239));
        notificationsPanel.setMinimumSize(new Dimension(960, 720));
        notificationsPanel.setPreferredSize(new Dimension(960, 720));
        backButton = new JButton();
        Font backButtonFont = this.$$$getFont$$$("Lucida Sans Unicode", -1, 14, backButton.getFont());
        if (backButtonFont != null) backButton.setFont(backButtonFont);
        backButton.setText("Back");
        notificationsPanel.add(backButton, BorderLayout.NORTH);
        notificationsTable = new JTable();
        notificationsTable.setBackground(new Color(-14402239));
        Font notificationsTableFont = this.$$$getFont$$$("Lucida Sans Unicode", -1, 16, notificationsTable.getFont());
        if (notificationsTableFont != null) notificationsTable.setFont(notificationsTableFont);
        notificationsTable.setForeground(new Color(-1));
        notificationsTable.setGridColor(new Color(-4517105));
        notificationsTable.setIntercellSpacing(new Dimension(10, 1));
        notificationsPanel.add(notificationsTable, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return notificationsPanel;
    }

}
