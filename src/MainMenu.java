import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.time.LocalDateTime;

public class MainMenu extends JFrame {

    private JPanel panel1;
    private JButton backButton;
    private JButton campaignsButton;
    private JButton vouchersButton;
    private JButton notificationsButton;
    private VMS vms;
    private User user;
    private LocalDateTime time;

    public MainMenu(VMS vms, User user, LocalDateTime time) {
        this();
        this.vms = vms;
        this.user = user;
        this.time = time;
        if (user.getType() == User.UserType.ADMIN) {
            this.setTitle("Admin menu");
            notificationsButton.setVisible(false);
            notificationsButton.setEnabled(false);
        } else {
            this.setTitle("Guest menu");
            notificationsButton.setVisible(true);
            notificationsButton.setEnabled(true);
        }
    }

    public MainMenu() {
        super.setContentPane(panel1);
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setLocation(this);
        this.pack();
        this.show();
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                MainMenu.super.dispose();
                try {
                    LoginMenu loginMenu = new LoginMenu(vms, user, time);
                    loginMenu.setVisible(true);
                } catch (IOException e1) {
                    System.out.println(e1.getStackTrace());
                }

            }
        });
        campaignsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                MainMenu.super.dispose();
                if (user.getType() == User.UserType.ADMIN) {
                    CampaignsManagement campaignsManagement = new CampaignsManagement(vms, user, time);
                    setLocation(campaignsManagement);
                    campaignsManagement.setDefaultCloseOperation(EXIT_ON_CLOSE);
                } else {
                    GuestCampaigns guestCampaigns = new GuestCampaigns(vms, user, time);
                    setLocation(guestCampaigns);
                    guestCampaigns.setDefaultCloseOperation(EXIT_ON_CLOSE);
                }
            }
        });
        vouchersButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                MainMenu.super.dispose();
                if (user.getType() == User.UserType.ADMIN) {
                    VouchersManagement vouchersManagement = new VouchersManagement(vms, user, time);
                    setLocation(vouchersManagement);
                    vouchersManagement.setDefaultCloseOperation(EXIT_ON_CLOSE);
                } else {
                    GuestVouchers guestVouchers = new GuestVouchers(vms, user, time);
                    setLocation(guestVouchers);
                    guestVouchers.setDefaultCloseOperation(EXIT_ON_CLOSE);
                }
            }
        });
        notificationsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                MainMenu.super.dispose();
                NotificationsMenu notificationsMenu = new NotificationsMenu
                        (vms, user, time);
                setLocation(notificationsMenu);
                notificationsMenu.setDefaultCloseOperation(EXIT_ON_CLOSE);
            }
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setBackground(new Color(-14402239));
        panel1.setMinimumSize(new Dimension(640, 480));
        panel1.setPreferredSize(new Dimension(640, 480));
        campaignsButton = new JButton();
        Font campaignsButtonFont = this.$$$getFont$$$("Lucida Sans Unicode", -1, 14, campaignsButton.getFont());
        if (campaignsButtonFont != null) campaignsButton.setFont(campaignsButtonFont);
        campaignsButton.setText("Campaigns");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 60;
        gbc.ipady = 10;
        gbc.insets = new Insets(0, 40, 200, 10);
        panel1.add(campaignsButton, gbc);
        vouchersButton = new JButton();
        Font vouchersButtonFont = this.$$$getFont$$$("Lucida Sans Unicode", -1, 14, vouchersButton.getFont());
        if (vouchersButtonFont != null) vouchersButton.setFont(vouchersButtonFont);
        vouchersButton.setText("Vouchers");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipady = 10;
        gbc.insets = new Insets(0, 10, 200, 40);
        panel1.add(vouchersButton, gbc);
        notificationsButton = new JButton();
        Font notificationsButtonFont = this.$$$getFont$$$("Lucida Sans Unicode", -1, 14, notificationsButton.getFont());
        if (notificationsButtonFont != null) notificationsButton.setFont(notificationsButtonFont);
        notificationsButton.setText("Notifications");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 60;
        gbc.ipady = 10;
        gbc.insets = new Insets(0, 10, 200, 10);
        panel1.add(notificationsButton, gbc);
        backButton = new JButton();
        Font backButtonFont = this.$$$getFont$$$("Lucida Sans Unicode", -1, 14, backButton.getFont());
        if (backButtonFont != null) backButton.setFont(backButtonFont);
        backButton.setText("Back");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipady = 10;
        gbc.insets = new Insets(0, 150, 120, 40);
        panel1.add(backButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    public JPanel getPanel1() {
        return panel1;
    }

    public static void setLocation(JFrame frame) {
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Point centerPoint = ge.getCenterPoint();
        int px = centerPoint.x / 2;
        int py = centerPoint.y / 2;
        frame.setLocation(px, py);
    }
}
