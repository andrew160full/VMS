import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Vector;

public class GuestCampaigns extends JFrame {


    private JButton backButton;
    private JPanel guestCampaignsPanel;
    private JTable campaignsTable;
    private VMS vms;
    private User user;
    private LocalDateTime time;

    public GuestCampaigns(VMS vms, User user, LocalDateTime time) {
        this();
        this.vms = vms;
        this.user = user;
        this.time = time;
        addCampaignsToTable();
    }

    public GuestCampaigns() {
        super.setTitle("Campaigns");
        super.setContentPane(guestCampaignsPanel);
        setLocation(this);
        pack();
        setVisible(true);
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                GuestCampaigns.super.dispose();
                MainMenu mainMenu = new MainMenu(vms, user, time);
                mainMenu.setVisible(true);
                mainMenu.show();
                mainMenu.setDefaultCloseOperation(EXIT_ON_CLOSE);
            }
        });
    }

    public static void main(String[] args) {
        new GuestCampaigns();
    }

    private void addCampaignsToTable() {
        Vector<Campaign> campaigns = new Vector<>();
        for (Campaign c : vms.getCampaigns()) {
            Vector<User> observers = c.getObservers();
            for (User u : observers) {
                if (u.getName().equals(user.getName())) {
                    campaigns.add(c);
                    break;
                }
            }
        }
        DefaultTableModel model = (DefaultTableModel)campaignsTable.getModel();
        model.addColumn("Campaign ID");
        model.addColumn("Campaign Name");
        model.addColumn("Description");
        model.addColumn("Start Date");
        model.addColumn("End Date");
        model.addColumn("Budget");
        model.addColumn("Strategy");

        model.addRow(new Object[]{"Campaign ID", "Name",
            "Description", "Start Date", "End Date", "Budget", "Strategy"});

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern
                ("yyyy-MM-dd HH:mm");
        for (Campaign c : campaigns) {
            String idString = Integer.toString(c.getCampaignId());
            String cName = c.getName();
            String description = c.getDescription();
            String startDate = c.getStart().format(formatter);
            String endDate = c.getFinish().format(formatter);
            String budget = Integer.toString(c.getAvailable());
            String strategy;
            if (c.getStrategy() != null)
                strategy = "None";
            else
                strategy = c.getStrategy().toString();
            model.addRow(new Object[]{idString, cName, description, startDate,
                    endDate, budget, strategy});
        }

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        guestCampaignsPanel = new JPanel();
        guestCampaignsPanel.setLayout(new BorderLayout(0, 0));
        guestCampaignsPanel.setBackground(new Color(-14402239));
        guestCampaignsPanel.setMinimumSize(new Dimension(960, 720));
        guestCampaignsPanel.setPreferredSize(new Dimension(960, 720));
        backButton = new JButton();
        Font backButtonFont = this.$$$getFont$$$("Lucida Sans Unicode", -1, 14,
                backButton.getFont());
        if (backButtonFont != null) backButton.setFont(backButtonFont);
        backButton.setText("Back");
        guestCampaignsPanel.add(backButton, BorderLayout.NORTH);
        campaignsTable = new JTable();
        campaignsTable.setBackground(new Color(-14402239));
        Font campaignsTableFont = this.$$$getFont$$$("Lucida Sans Unicode",
                -1, 15, campaignsTable.getFont());
        if (campaignsTableFont != null) campaignsTable.setFont
                (campaignsTableFont);
        campaignsTable.setForeground(new Color(-1));
        campaignsTable.setGridColor(new Color(-4517105));
        campaignsTable.setIntercellSpacing(new Dimension(10, 1));
        campaignsTable.setName("");
        campaignsTable.setRowHeight(32);
        campaignsTable.setRowMargin(1);
        guestCampaignsPanel.add(campaignsTable, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font
            currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.
                getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return guestCampaignsPanel;
    }

    public static void setLocation(JFrame frame) {
        GraphicsEnvironment ge = GraphicsEnvironment.
                getLocalGraphicsEnvironment();
        Point centerPoint = ge.getCenterPoint();
        int px = centerPoint.x / 2;
        int py = centerPoint.y / 2;
        frame.setLocation(px, py);
    }

}
